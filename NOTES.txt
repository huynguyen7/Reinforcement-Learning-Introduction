** In Reinforcement learning, the agent or decision-maker generates its training data by interacting with the world..

* Brief Introduction For Single State K-bandits:
https://thomassimonini.medium.com/q-learning-lets-create-an-autonomous-taxi-part-1-2-3e8f5e764358
https://thomassimonini.medium.com/q-learning-lets-create-an-autonomous-taxi-part-2-2-8cbafa19d7f5
http://www.inf.ed.ac.uk/teaching/courses/rl/slides17/3_DP_MC.pdf
https://www.mlq.ai/what-is-reinforcement-learning/
https://www.deeplearningwizard.com/deep_learning/deep_reinforcement_learning_pytorch/bellman_mdp/

* Lectures:
https://www.davidsilver.uk/teaching/
https://www.guru99.com/reinforcement-learning-tutorial.html#2
http://hal.cse.msu.edu/teaching/2020-fall-artificial-intelligence/
https://torres.ai/deep-reinforcement-learning-explained-series/

* Codes:
https://github.com/dennybritz/reinforcement-learning

* Books:
http://incompleteideas.net/book/RLbook2018.pdf
https://sites.ualberta.ca/~szepesva/papers/RLAlgsInMDPs.pdf

* V vs Q in RL:
https://zsalloum.medium.com/q-vs-v-in-reinforcement-learning-the-easy-way-9350e1523031

* Markov Chains:
https://setosa.io/ev/markov-chains/
https://towardsdatascience.com/brief-introduction-to-markov-chains-2c8cab9c98ab

* Markov Decision Process --> Generally, used to solve multiple state RL problem:
http://hal.cse.msu.edu/teaching/2020-fall-artificial-intelligence/13-markov-decision-processes/

* TIC-TAC-TOE Self-Play Tabular Q-Leaning Example:
https://towardsdatascience.com/an-introductory-reinforcement-learning-project-learning-tic-tac-toe-via-self-play-tabular-b8b845e18fe

* Law of large numbers:
https://en.wikipedia.org/wiki/Law_of_large_numbers

* Central Limit Theorem:
https://www.youtube.com/watch?v=b5xQmk9veZ4

* K-bandits:
https://oneraynyday.github.io/ml/2018/05/03/Reinforcement-Learning-Bandit/#gradient-bandit-algorithms

* The Upper Confidence Bound Algorithm(UCB):
https://banditalgs.com/2016/09/18/the-upper-confidence-bound-algorithm/

* Evolutionary Algorithm:
https://keiwando.com/evolution/faq/evolutionary-algorithm/

* Epsilon-Greedy Q-Learning Algorithm:
https://www.baeldung.com/cs/epsilon-greedy-q-learning

* The Bellman Equation:
https://towardsdatascience.com/the-bellman-equation-59258a0d3fa7

* Returns and Episodes:
http://incompleteideas.net/book/first/ebook/node30.html

* Stochastic policy vs Deterministic policy:
https://ai.stackexchange.com/questions/12274/what-is-the-difference-between-a-stochastic-and-a-deterministic-policy

* Policy gradients:
https://www.freecodecamp.org/news/an-introduction-to-policy-gradients-with-cartpole-and-doom-495b5ef2207f/

* Environments and actions space:
https://machinelearningknowledge.ai/basic-understanding-of-environment-and-its-types-in-reinforcement-learning/#Environment_Action_Space_in_Reinforcement_Learning
